#define F first
#define S second

struct MyComp {
        bool operator() (const pair<int, string>& a, const pair<int, string>& b) {
            if(a.first != b.first) {
                return a.first > b.first;
            }
            else {
                return a.second < b.second;
            }
        }
};

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        vector<string> v;
        int n = words.size();
        if(n==0 || n<k)
        {
            return words;
        }
        map<string,int> mp;
        for(int i=0;i<n;i++)
        {
            mp[words[i]]++;
        }
        priority_queue<pair<int,string>,vector<pair<int,string>>,MyComp> pq;
        for(auto it=mp.begin();it!=mp.end();it++)
        {
            pq.push({it->S,it->F});
            if(pq.size()>k)
            {
                pq.pop();
            }
        }
        while(!pq.empty())
        {
            pair<int,string> pr = pq.top();
            v.push_back(pr.S);
            pq.pop();
        }
        reverse(v.begin(),v.end());
        return v;
    }
};
