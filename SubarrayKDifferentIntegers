int atMostK(vector<int> v,int k)
{
    int ans = 0;
    unordered_map<int,int> mp;
    int i = 0;
    int j = 0;
    int n = v.size();
    int cnt = 0;
    while(j<n)
    {
        if(mp.find(v[j])==mp.end())
        {
            cnt++;
        }
        mp[v[j]]++;
        while(cnt>k && i<=j)
        {
            mp[v[i]]--;
            if(mp[v[i]]==0)
            {
                mp.erase(v[i]);
                cnt--;
            }
            i++;
        }
        ans += (j-i+1);
        j++;
    }
    return ans;
}

class Solution {
public:
    int subarraysWithKDistinct(vector<int>& a, int k) {
        int n = a.size();
        if(n==0)
            return 0;
        return atMostK(a,k)-atMostK(a,k-1);
    }
};
